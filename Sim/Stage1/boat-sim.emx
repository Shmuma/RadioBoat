<?xml version="1.0" encoding="UTF-8"?>
<Document>
  <Model version="4.1" build="4.1.0.5">
    <Sidops>
<![CDATA[model 128 184 description '<Description>
   <Version>4.1</Version>
<IsMainModel>0</IsMainModel>
 <KeepParameterValues>False</KeepParameterValues>
   <LibraryPath>C:\Users\Shmuma\Work\RadioBoat\Sim\Stage1\boat-sim.emx</LibraryPath>
  <TimeStamp>2011-3-28 22:33:11</TimeStamp>
</Description>'; type Mainmodel end; implementation bg  submodels   TwoDPoint 360 275.2			specifications active 'X'				specification 'X' description '<Description><Version>4.0</Version><IsMainModel>1</IsMainModel><KeepParameterValues>False</KeepParameterValues>   <LibraryPath>Iconic Diagrams\Mechanical\Translation\2DSmallRotation\TwoDPoint.emx</LibraryPath>  <TimeStamp>2008-1-24 10:10:10</TimeStamp></Description>'; type TwoDPoint  ports   translation psi in p_in;   translation psi out P_out [3,1];  restrictions   causality fixed in p_in;   causality fixed out P_out; end; icon bg bottom  figures   line 344 272 372.5 272 fill 12895428 width 2 end;   rectangle 344 263.8 376 280.2 color -1;   text 'X' 356.3 279.6;  terminals   p_in 344 272 fixed;   P_out 376 272 fixed; end; implementation eqparameters	real YP = 0.1 {m};		// Distance (y-direction) between connection and center of massequations	P_out.F = [p_in.F;				0;				-p_in.F * YP];	p_in.v = P_out.v[1] - YP * P_out.v[3];implementation_end;specification_end;				specification 'Y'description '<Description><Version>4.0</Version><IsMainModel>1</IsMainModel><KeepParameterValues>False</KeepParameterValues>   <LibraryPath>Iconic Diagrams\Mechanical\Translation\2DSmallRotation\TwoDPoint.emx</LibraryPath>  <TimeStamp>2008-1-24 10:10:10</TimeStamp></Description>'; type TwoDPoint  ports   translation psi in p_in;   translation psi out P_out [3,1];  restrictions   causality fixed in p_in;   causality fixed out P_out; end; icon bg bottom  figures   line 181 126.3 181 100.3 fill 12895428 width 2 end;   rectangle 172.8 97.7 188.5 126.3 color -1;   text 'Y' 189.2 116.1 color -1;  terminals   p_in 181 128 fixed;   P_out 181 96 fixed; end; implementation eqparameters	real XP = 0.1 {m};			// Distance (x-direction) between connection and center of massequations	P_out.F = [0;				p_in.F;				p_in.F * XP];	p_in.v = P_out.v[2] + XP * P_out.v[3];implementation_end;specification_end;				specification 'theta'description '<Description><Version>4.0</Version><IsMainModel>1</IsMainModel><KeepParameterValues>False</KeepParameterValues>   <LibraryPath>Iconic Diagrams\Mechanical\Translation\2DSmallRotation\TwoDPoint.emx</LibraryPath>  <TimeStamp>2008-1-24 10:10:10</TimeStamp></Description>'; type TwoDPoint  ports   rotation psi in p_in;   translation psi out P_out [3,1];  restrictions   causality fixed out P_out;   causality fixed in p_in; end; icon bg bottom  figures   text 'q' 193.1 109.7 'SymbolProp BT' 15 symbol;   spline 168.8 122.8 173.3 113.9 181.8 114.4 185 123.3 fill 12895428 width 2 start open;  terminals   p_in 168 108.8;   P_out 200 108.8; end; implementation eqparameters	real hidden unittransfer = 1 {rad/m}; 	// this variable prevents a unit conflict between 											// the single port (rad/s) and the 3D port (m/s)equations	P_out.e = [0;				0;				p_in.T/unittransfer];	p_in.omega = unittransfer*P_out.f[3];implementation_end;specification_end;				specification 'XY'description '<Description><Version>4.0</Version><IsMainModel>1</IsMainModel><KeepParameterValues>False</KeepParameterValues>   <LibraryPath>Iconic Diagrams\Mechanical\Translation\2DSmallRotation\TwoDPoint.emx</LibraryPath>  <TimeStamp>2008-1-24 10:10:10</TimeStamp></Description>'; type TwoDPoint  ports   translation psi in p_in;   translation psi out P_out [3,1];  restrictions   causality fixed in p_in;   causality fixed out P_out; end; icon bg bottom  figures   line 170 116.7 186.4 100.4 fill 12895428 width 2 end;   text 'X,Y' 187.9 116.5 color -1;  terminals   p_in 170.2 116.6 fixed;   P_out 186.2 100.6 fixed; end; implementation eqparameters	real XP = 0.1 {m};			// Distance (x-direction) between connection and center of mass	real YP = 0.1 {m};			// Distance (y-direction) between connection and center of mass	real theta = 1.0 {rad};		// Angle of impact of the single degree of freedom portvariables	real hidden Fx, Fy;	real hidden sinTheta,cosTheta;	real hidden XPsTminYPcT;initialequations	sinTheta = sin(theta);	// make the code more efficient by calculating some static variables here	cosTheta = cos(theta);	XPsTminYPcT = (XP * sinTheta - YP * cosTheta);equations	Fx = cosTheta * p_in.F;	Fy = sinTheta * p_in.F;	P_out.F = [Fx;							// xForce				Fy;							// yForce				Fy * XP - Fx * YP];			// Torque	p_in.v = cosTheta * P_out.v[1] + 		// xVelocity			  sinTheta * P_out.v[2] +  		// yVelocity			  XPsTminYPcT * P_out.v[3];	// rotationalVelocityimplementation_end;specification_end;			end;   TwoDBody 488 272    description '<Description><Version>4.0</Version><IsMainModel>1</IsMainModel><KeepParameterValues>False</KeepParameterValues>   <LibraryPath>Iconic Diagrams\Mechanical\Translation\2DSmallRotation\TwoDBody.emx</LibraryPath>  <TimeStamp>2007-9-25 17:53:45</TimeStamp></Description>';    type TwoDBody     ports      translation psi duplicatable in P [3,1];     restrictions      causality preferred in P;    end;    icon bg bottom     figures      rectangle 463.6 247.9 512.2 298.4 fill 15132390;      line 482.4 280.4 506.8 280.4 fill 12895428 end;      line 485.3 284.4 485.3 259.9 fill 12895428 end;      text 'x' 506.3 269.6 14;      text 'y' 492.3 253.4 14;      text 'q' 473.8 272.4 'SymbolProp BT' 14 symbol;      spline 496.8 286 490.8 275.6 479.4 276.3 475.1 286.6 fill 12895428 open;      group       line 472.6 285.9 475.3 291.4 478.2 285.9 472.6 285.9 fill 0 open;      end;      text '2D' 503.3 291.6;     terminals      P 463.6 272;      P 463.6 272;    end;    implementation eqparameters	real J = 1.0e-3  {kg.m2/rad};		// moment of inertia	real M = 1.0 {kg};				// mass	variables	real I[3];initialequations	I = [1/M;	  	1/M;	  	1/J];equations	P.v = I .* int(P.F);implementation_end;   ForceActuator 247.2 272.8    description '<Description><Version>4.0</Version><IsMainModel>1</IsMainModel><KeepParameterValues>False</KeepParameterValues>   <LibraryPath>Iconic Diagrams\Mechanical\Translation\Actuators\ForceActuator.emx</LibraryPath>  <TimeStamp>2007-9-26 9:27:20</TimeStamp></Description>';    type ForceActuator     ports      translation psi out p;      signal in F {N} ;     restrictions      causality fixed out p;    end;    icon ipm bottom     figures      line 256.6 272 270.4 272 end;      text 'F' 249.6 272 14;      line 229.9 261.4 229.9 288 width 2;      line 224 259.2 229.9 264.6 fill 2005303;      line 224 264.6 229.9 269.9 fill 2005303;      line 224 269.9 229.9 275.2 fill 2005303;      line 224 275.2 229.9 280.6 fill 2005303;      line 224 280.6 229.9 285.9 fill 2005303;      line 242.7 272 231 272 end;      line 247.5 265.1 247.5 257.6;     terminals      p 272 272 fixed;      F 247.5 257.6 fixed;    end;    implementation eqvariables	real hidden v {m/s};equations	p.F = F;      v = p.v;implementation_end;   Pulse 248 184    description '<Description><Version>4.0</Version><IsMainModel>1</IsMainModel><KeepParameterValues>False</KeepParameterValues>   <LibraryPath>Signal\Sources\SignalGenerator-Pulse.emx</LibraryPath>  <TimeStamp>2007-9-27 16:1:38</TimeStamp></Description>';    type 'SignalGenerator-Pulse'     ports      signal out output;    end;    icon bg bottom     figures      rectangle 232.1 168 263.9 200 fill 15132390;      line 243.7 182.4 249.4 182.4 color 16711680 width 2;      line 235 194.2 261 194.2;      line 238 194.1 243.6 194.1 243.6 182.5 color 16711680 width 2;      line 238 176.6 238 197;      line 258.2 194.2 249.4 194.1 249.4 182.5 color 16711680 width 2;    end;    implementation eqparameters	real start_time = 1.0 {s};	real stop_time = 2 {s};	real amplitude = 1 {none};variables	boolean hidden change;equations	"calculate at least at the start and stop time"	change = timeevent (start_time) or timeevent (stop_time);	"calculate the block signal"	output = amplitude * (step (start_time) - step (stop_time));implementation_end;  end;  connections   TwoDPoint\P_out => TwoDBody\P;   ForceActuator\p => TwoDPoint\p_in;   Pulse\output -> ForceActuator\F;  end; implementation_end;]]>
    </Sidops>
  </Model>
</Document>
