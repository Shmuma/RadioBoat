CCS PCH C Compiler, Version 4.114, 93460303               13-мар-11 12:59

               Filename: C:\Users\Shmuma\Work\RadioBoat\Firmware\Servo Control\servo.lst

               ROM used: 3470 bytes (11%)
                         Largest free fragment is 29294
               RAM used: 44 (2%) at main() level
                         83 (4%) worst case
               Stack:    10 worst case (7 in main + 3 for interrupts)

*
0000:  GOTO   0D12
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   0190
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include <servo.h> 
.................... #include <18F2550.h> 
.................... //////// Standard Header file for the PIC18F2550 device //////////////// 
.................... #device PIC18F2550 
.................... #list 
....................  
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES PLL3                  	//Divide By 3(12MHz oscillator input) 
.................... #FUSES CPUDIV4               	//System Clock by 4 
.................... #FUSES USBDIV                	//USB clock source comes from PLL divide by 2 
.................... #FUSES HSPLL                 	//External Clock with PLL enabled and Fosc/4 on RA6 
.................... #FUSES FCMEN                 	//Fail-safe clock monitor enabled 
.................... #FUSES IESO                  	//Internal External Switch Over mode enabled 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES BORV20                	//Brownout reset at 2.0V 
.................... #FUSES VREGEN                	//USB voltage regulator enabled 
.................... #FUSES PBADEN                	//PORTB pins are configured as analog input channels on RESET 
.................... #FUSES LPT1OSC               	//Timer1 configured for low-power operation 
.................... #FUSES MCLR                  	//Master Clear pin enabled 
.................... #FUSES STVREN                	//Stack full/underflow will cause reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOCPB                 	//No Boot Block code protection 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NOWRTC                	//configuration not registers write protected 
.................... #FUSES NOWRTB                	//Boot block not write protected 
.................... #FUSES NOWRTD                	//Data EEPROM not write protected 
.................... #FUSES NOEBTR                	//Memory not protected from table reads 
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads 
....................  
.................... #define CLOCK_HZ 16000000 
.................... #use delay(clock=16000000) 
*
0276:  CLRF   FEA
0278:  MOVLW  40
027A:  MOVWF  FE9
027C:  MOVF   FEF,W
027E:  BZ    029C
0280:  MOVLW  05
0282:  MOVWF  01
0284:  CLRF   00
0286:  DECFSZ 00,F
0288:  BRA    0286
028A:  DECFSZ 01,F
028C:  BRA    0284
028E:  MOVLW  2E
0290:  MOVWF  00
0292:  DECFSZ 00,F
0294:  BRA    0292
0296:  BRA    0298
0298:  DECFSZ FEF,F
029A:  BRA    0280
029C:  RETLW  00
....................  
....................  
....................  
.................... /* LCD control */ 
.................... #define LCD_EXTENDED_NEWLINE TRUE 
....................  
.................... #define LCD_ENABLE_PIN PIN_B2 
.................... #define LCD_RS_PIN PIN_B0 
.................... #define LCD_RW_PIN PIN_B1 
.................... #define LCD_DATA4 PIN_A4 
.................... #define LCD_DATA5 PIN_A5 
.................... #define LCD_DATA6 PIN_B3 
.................... #define LCD_DATA7 PIN_B4 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0336:  BSF    F92.4
....................    output_float(LCD_DATA5); 
0338:  BSF    F92.5
....................    output_float(LCD_DATA6); 
033A:  BSF    F93.3
....................    output_float(LCD_DATA7); 
033C:  BSF    F93.4
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
033E:  BSF    F8A.1
0340:  BCF    F93.1
....................    delay_cycles(1); 
0342:  NOP   
....................    lcd_output_enable(1); 
0344:  BSF    F8A.2
0346:  BCF    F93.2
....................    delay_cycles(1); 
0348:  NOP   
....................    high = lcd_read_nibble(); 
034A:  RCALL  02E4
034C:  MOVFF  01,48
....................        
....................    lcd_output_enable(0); 
0350:  BCF    F8A.2
0352:  BCF    F93.2
....................    delay_cycles(1); 
0354:  NOP   
....................    lcd_output_enable(1); 
0356:  BSF    F8A.2
0358:  BCF    F93.2
....................    delay_us(1); 
035A:  BRA    035C
035C:  BRA    035E
....................    low = lcd_read_nibble(); 
035E:  RCALL  02E4
0360:  MOVFF  01,47
....................        
....................    lcd_output_enable(0); 
0364:  BCF    F8A.2
0366:  BCF    F93.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0368:  BCF    F92.4
....................    output_drive(LCD_DATA5); 
036A:  BCF    F92.5
....................    output_drive(LCD_DATA6); 
036C:  BCF    F93.3
....................    output_drive(LCD_DATA7); 
036E:  BCF    F93.4
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0370:  SWAPF  48,W
0372:  MOVWF  00
0374:  MOVLW  F0
0376:  ANDWF  00,F
0378:  MOVF   00,W
037A:  IORWF  47,W
037C:  MOVWF  01
.................... } 
037E:  GOTO   038E (RETURN)
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
02E4:  CLRF   49
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
02E6:  BSF    F92.4
02E8:  MOVLW  00
02EA:  BTFSC  F80.4
02EC:  MOVLW  01
02EE:  IORWF  49,F
....................    n |= input(LCD_DATA5) << 1; 
02F0:  BSF    F92.5
02F2:  MOVLW  00
02F4:  BTFSC  F80.5
02F6:  MOVLW  01
02F8:  MOVWF  00
02FA:  BCF    FD8.0
02FC:  RLCF   00,F
02FE:  MOVF   00,W
0300:  IORWF  49,F
....................    n |= input(LCD_DATA6) << 2; 
0302:  BSF    F93.3
0304:  MOVLW  00
0306:  BTFSC  F81.3
0308:  MOVLW  01
030A:  MOVWF  00
030C:  RLCF   00,F
030E:  RLCF   00,F
0310:  MOVLW  FC
0312:  ANDWF  00,F
0314:  MOVF   00,W
0316:  IORWF  49,F
....................    n |= input(LCD_DATA7) << 3; 
0318:  BSF    F93.4
031A:  MOVLW  00
031C:  BTFSC  F81.4
031E:  MOVLW  01
0320:  MOVWF  00
0322:  RLCF   00,F
0324:  RLCF   00,F
0326:  RLCF   00,F
0328:  MOVLW  F8
032A:  ANDWF  00,F
032C:  MOVF   00,W
032E:  IORWF  49,F
....................     
....................    return(n); 
0330:  MOVFF  49,01
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
0334:  RETLW  00
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
029E:  BTFSC  48.0
02A0:  BRA    02A6
02A2:  BCF    F89.4
02A4:  BRA    02A8
02A6:  BSF    F89.4
02A8:  BCF    F92.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
02AA:  BTFSC  48.1
02AC:  BRA    02B2
02AE:  BCF    F89.5
02B0:  BRA    02B4
02B2:  BSF    F89.5
02B4:  BCF    F92.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
02B6:  BTFSC  48.2
02B8:  BRA    02BE
02BA:  BCF    F8A.3
02BC:  BRA    02C0
02BE:  BSF    F8A.3
02C0:  BCF    F93.3
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
02C2:  BTFSC  48.3
02C4:  BRA    02CA
02C6:  BCF    F8A.4
02C8:  BRA    02CC
02CA:  BSF    F8A.4
02CC:  BCF    F93.4
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
02CE:  NOP   
....................    lcd_output_enable(1); 
02D0:  BSF    F8A.2
02D2:  BCF    F93.2
....................    delay_us(2); 
02D4:  MOVLW  02
02D6:  MOVWF  00
02D8:  DECFSZ 00,F
02DA:  BRA    02D8
02DC:  NOP   
....................    lcd_output_enable(0); 
02DE:  BCF    F8A.2
02E0:  BCF    F93.2
.................... } 
02E2:  RETLW  00
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0382:  BCF    F93.2
....................    lcd_rs_tris(); 
0384:  BCF    F93.0
....................    lcd_rw_tris(); 
0386:  BCF    F93.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0388:  BCF    F8A.0
038A:  BCF    F93.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
038C:  BRA    0336
038E:  MOVFF  01,47
0392:  BTFSC  01.7
0394:  BRA    038C
....................    lcd_output_rs(address); 
0396:  MOVF   45,F
0398:  BNZ   039E
039A:  BCF    F8A.0
039C:  BRA    03A0
039E:  BSF    F8A.0
03A0:  BCF    F93.0
....................    delay_cycles(1); 
03A2:  NOP   
....................    lcd_output_rw(0); 
03A4:  BCF    F8A.1
03A6:  BCF    F93.1
....................    delay_cycles(1); 
03A8:  NOP   
....................    lcd_output_enable(0); 
03AA:  BCF    F8A.2
03AC:  BCF    F93.2
....................    lcd_send_nibble(n >> 4); 
03AE:  SWAPF  46,W
03B0:  MOVWF  47
03B2:  MOVLW  0F
03B4:  ANDWF  47,F
03B6:  MOVFF  47,48
03BA:  RCALL  029E
....................    lcd_send_nibble(n & 0xf); 
03BC:  MOVF   46,W
03BE:  ANDLW  0F
03C0:  MOVWF  47
03C2:  MOVWF  48
03C4:  RCALL  029E
.................... } 
03C6:  RETLW  00
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
03C8:  BCF    F92.4
....................    output_drive(LCD_DATA5); 
03CA:  BCF    F92.5
....................    output_drive(LCD_DATA6); 
03CC:  BCF    F93.3
....................    output_drive(LCD_DATA7); 
03CE:  BCF    F93.4
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
03D0:  BCF    F93.2
....................    lcd_rs_tris(); 
03D2:  BCF    F93.0
....................    lcd_rw_tris(); 
03D4:  BCF    F93.1
....................  #endif 
....................  
....................    lcd_output_rs(0); 
03D6:  BCF    F8A.0
03D8:  BCF    F93.0
....................    lcd_output_rw(0); 
03DA:  BCF    F8A.1
03DC:  BCF    F93.1
....................    lcd_output_enable(0); 
03DE:  BCF    F8A.2
03E0:  BCF    F93.2
....................      
....................    delay_ms(15); 
03E2:  MOVLW  0F
03E4:  MOVWF  40
03E6:  RCALL  0276
....................    for(i=1;i<=3;++i) 
03E8:  MOVLW  01
03EA:  MOVWF  2A
03EC:  MOVF   2A,W
03EE:  SUBLW  03
03F0:  BNC   0406
....................    { 
....................        lcd_send_nibble(3); 
03F2:  MOVLW  03
03F4:  MOVWF  48
03F6:  RCALL  029E
....................        lcd_send_nibble(0); 
03F8:  CLRF   48
03FA:  RCALL  029E
....................        delay_ms(5); 
03FC:  MOVLW  05
03FE:  MOVWF  40
0400:  RCALL  0276
....................    } 
0402:  INCF   2A,F
0404:  BRA    03EC
....................     
....................    lcd_send_nibble(2); 
0406:  MOVLW  02
0408:  MOVWF  48
040A:  RCALL  029E
....................    lcd_send_nibble(0); 
040C:  CLRF   48
040E:  RCALL  029E
....................    delay_ms(5); 
0410:  MOVLW  05
0412:  MOVWF  40
0414:  RCALL  0276
....................    for(i=0;i<=3;++i) 
0416:  CLRF   2A
0418:  MOVF   2A,W
041A:  SUBLW  03
041C:  BNC   0430
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
041E:  CLRF   03
0420:  MOVF   2A,W
0422:  RCALL  00AE
0424:  MOVWF  2B
0426:  CLRF   45
0428:  MOVWF  46
042A:  RCALL  0382
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
042C:  INCF   2A,F
042E:  BRA    0418
....................    g_LcdX = 0; 
0430:  CLRF   1A
....................    g_LcdY = 0; 
0432:  CLRF   1B
....................   #endif 
.................... } 
0434:  GOTO   0D30 (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................     
....................    if(y!=1) 
0438:  DECFSZ 42,W
043A:  BRA    043E
043C:  BRA    0444
....................       address=LCD_LINE_TWO; 
043E:  MOVLW  40
0440:  MOVWF  43
....................    else 
0442:  BRA    0446
....................       address=0; 
0444:  CLRF   43
....................       
....................    address+=x-1; 
0446:  MOVLW  01
0448:  SUBWF  41,W
044A:  ADDWF  43,F
....................    lcd_send_byte(0,0x80|address); 
044C:  MOVF   43,W
044E:  IORLW  80
0450:  MOVWF  44
0452:  CLRF   45
0454:  MOVWF  46
0456:  RCALL  0382
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
0458:  MOVLW  01
045A:  SUBWF  41,W
045C:  MOVWF  1A
....................    g_LcdY = y - 1; 
045E:  MOVLW  01
0460:  SUBWF  42,W
0462:  MOVWF  1B
....................   #endif 
.................... } 
0464:  RETLW  00
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
0466:  MOVF   3F,W
0468:  XORLW  07
046A:  BZ    047E
046C:  XORLW  0B
046E:  BZ    0488
0470:  XORLW  01
0472:  BZ    049C
0474:  XORLW  07
0476:  BZ    04AE
0478:  XORLW  02
047A:  BZ    04D4
047C:  BRA    04DE
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
047E:  MOVLW  01
0480:  MOVWF  41
0482:  MOVWF  42
0484:  RCALL  0438
0486:  BRA    04F2
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0488:  CLRF   45
048A:  MOVLW  01
048C:  MOVWF  46
048E:  RCALL  0382
....................                      delay_ms(2); 
0490:  MOVLW  02
0492:  MOVWF  40
0494:  RCALL  0276
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
0496:  CLRF   1A
....................                      g_LcdY = 0; 
0498:  CLRF   1B
....................                     #endif 
....................                      break; 
049A:  BRA    04F2
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
049C:  MOVLW  01
049E:  ADDWF  1B,W
04A0:  MOVWF  40
04A2:  MOVLW  01
04A4:  MOVWF  41
04A6:  MOVFF  40,42
04AA:  RCALL  0438
04AC:  BRA    04F2
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
04AE:  MOVF   1A,W
04B0:  INCF   1A,F
04B2:  SUBLW  13
04B4:  BNC   04C2
....................             lcd_send_byte(1, ' '); 
04B6:  MOVLW  01
04B8:  MOVWF  45
04BA:  MOVLW  20
04BC:  MOVWF  46
04BE:  RCALL  0382
....................          } 
04C0:  BRA    04AE
....................          lcd_gotoxy(1, g_LcdY+2); 
04C2:  MOVLW  02
04C4:  ADDWF  1B,W
04C6:  MOVWF  40
04C8:  MOVLW  01
04CA:  MOVWF  41
04CC:  MOVFF  40,42
04D0:  RCALL  0438
....................          break; 
04D2:  BRA    04F2
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
04D4:  CLRF   45
04D6:  MOVLW  10
04D8:  MOVWF  46
04DA:  RCALL  0382
04DC:  BRA    04F2
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
04DE:  MOVF   1A,W
04E0:  SUBLW  13
04E2:  BNC   04F0
....................          { 
....................             lcd_send_byte(1, c); 
04E4:  MOVLW  01
04E6:  MOVWF  45
04E8:  MOVFF  3F,46
04EC:  RCALL  0382
....................             g_LcdX++; 
04EE:  INCF   1A,F
....................          } 
....................          break; 
04F0:  BRA    04F2
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
....................      #endif 
....................    } 
.................... } 
04F2:  RETLW  00
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
....................  
.................... #define CH1_PIN PIN_B7 
.................... #define CH2_PIN PIN_C2 
.................... // PIN_C2 
.................... // PIN_B7 
....................  
.................... #use fast_io (A) 
....................  
.................... #define PWM_LOW_INT    50         /* 0.5 ms */ 
.................... #define PWM_HIGH_INT   500        /* 5 ms */ 
.................... #define PWM_TOTAL_INT  2500       /* 25 ms */ 
....................  
.................... /* We want to get interrupt at 10KHz to be able to handle 100HZ PWM with 1% */ 
.................... #define INT_TO_COUNT(i) ((int16)(i)*10/(4*CLOCK_HZ/1000000)) 
.................... #define DUTY_TO_INT(p) (PWM_LOW_INT + ((PWM_HIGH_INT-PWM_LOW_INT)*(int16)p/100)) 
....................  
.................... /* T0_VAL (65535 - (CLOCK_HZ/40000) + 50) */ 
....................  
.................... /* pwm parameters */ 
.................... int8 pwm_duty1;                  /* in percent */ 
.................... int8 pwm_duty2; 
....................  
.................... /* pwm state */ 
.................... int16 pwm_int1, pwm_int2; 
.................... int16 pwm_duty1_cnt, pwm_duty2_cnt, pwm_total_cnt; 
....................  
....................  
.................... void update_lcd (); 
.................... void set_pwm_duty (int8 duty1, int8 duty2); 
.................... void reset_pwm (); 
....................  
....................  
.................... inline int16 update_pwm_cnt (int16 cnt, int8 channel) 
.................... { 
....................     if (cnt > 1) 
*
019C:  MOVF   4D,F
019E:  BNZ   01A6
01A0:  MOVF   4C,W
01A2:  SUBLW  01
01A4:  BC    01BC
*
01EE:  MOVF   4D,F
01F0:  BNZ   01F8
01F2:  MOVF   4C,W
01F4:  SUBLW  01
01F6:  BC    020E
....................         return cnt-1; 
*
01A6:  MOVLW  01
01A8:  SUBWF  4C,W
01AA:  MOVWF  00
01AC:  MOVLW  00
01AE:  SUBWFB 4D,W
01B0:  MOVWF  03
01B2:  MOVFF  00,01
01B6:  MOVWF  02
01B8:  BRA    01DA
*
01F8:  MOVLW  01
01FA:  SUBWF  4C,W
01FC:  MOVWF  00
01FE:  MOVLW  00
0200:  SUBWFB 4D,W
0202:  MOVWF  03
0204:  MOVFF  00,01
0208:  MOVWF  02
020A:  BRA    022C
....................     else { 
*
01BA:  BRA    01DA
*
020C:  BRA    022C
....................         if (cnt) 
*
01BC:  MOVF   4C,W
01BE:  IORWF  4D,W
01C0:  BZ    01D2
*
020E:  MOVF   4C,W
0210:  IORWF  4D,W
0212:  BZ    0224
....................             output_low (channel); 
*
01C2:  MOVFF  4E,4F
01C6:  CLRF   50
01C8:  MOVLW  0F
01CA:  MOVWF  52
01CC:  MOVLW  89
01CE:  MOVWF  51
01D0:  RCALL  00C2
*
0214:  MOVFF  4E,4F
0218:  CLRF   50
021A:  MOVLW  0F
021C:  MOVWF  52
021E:  MOVLW  89
0220:  MOVWF  51
0222:  RCALL  00C2
....................         return 0; 
*
01D2:  MOVLW  00
01D4:  MOVWF  01
01D6:  MOVWF  02
01D8:  BRA    01DA
*
0224:  MOVLW  00
0226:  MOVWF  01
0228:  MOVWF  02
022A:  BRA    022C
....................     } 
.................... } 
....................  
.................... #int_timer0 
.................... void isr_timer0 (void) 
.................... { 
....................     pwm_duty1_cnt = update_pwm_cnt (pwm_duty1_cnt, CH1_PIN); 
*
0190:  MOVFF  23,4D
0194:  MOVFF  22,4C
0198:  MOVLW  0F
019A:  MOVWF  4E
*
01DA:  MOVFF  02,23
01DE:  MOVFF  01,22
....................     pwm_duty2_cnt = update_pwm_cnt (pwm_duty2_cnt, CH2_PIN); 
01E2:  MOVFF  25,4D
01E6:  MOVFF  24,4C
01EA:  MOVLW  12
01EC:  MOVWF  4E
*
022C:  MOVFF  02,25
0230:  MOVFF  01,24
....................  
....................     if (pwm_total_cnt > 0) 
0234:  MOVF   26,F
0236:  BNZ   023C
0238:  MOVF   27,F
023A:  BZ    0246
....................         pwm_total_cnt--; 
023C:  MOVF   26,W
023E:  BTFSC  FD8.2
0240:  DECF   27,F
0242:  DECF   26,F
....................     else 
0244:  BRA    0248
....................         reset_pwm (); 
0246:  RCALL  011E
.................... } 
....................  
....................  
0248:  BCF    FF2.2
024A:  GOTO   0060
.................... void main() 
.................... { 
*
0D12:  CLRF   FF8
0D14:  BCF    FD0.7
0D16:  BSF    07.7
0D18:  CLRF   FEA
0D1A:  CLRF   FE9
0D1C:  MOVF   FC1,W
0D1E:  ANDLW  C0
0D20:  IORLW  0F
0D22:  MOVWF  FC1
0D24:  MOVLW  07
0D26:  MOVWF  FB4
0D28:  CLRF   29
0D2A:  CLRF   28
....................     int16 c = 0; 
....................     lcd_init (); 
0D2C:  GOTO   03C8
....................     lcd_putc ('\f'); 
0D30:  MOVLW  0C
0D32:  MOVWF  3F
0D34:  CALL   0466
....................  
....................     set_tris_b (0);             /* output on B */ 
0D38:  MOVLW  00
0D3A:  MOVWF  F93
....................     set_tris_c (0);             /* output on C */ 
0D3C:  MOVWF  F94
....................     set_pwm_duty (0, 0); 
0D3E:  CLRF   2C
0D40:  CLRF   2D
0D42:  CALL   0536
....................  
....................     setup_timer_0 (RTCC_INTERNAL | RTCC_DIV_1 | RTCC_8_BIT); 
0D46:  MOVLW  C8
0D48:  MOVWF  FD5
....................     enable_interrupts (INT_TIMER0); 
0D4A:  BSF    FF2.5
....................     enable_interrupts (GLOBAL); 
0D4C:  MOVLW  C0
0D4E:  IORWF  FF2,F
....................  
....................     for (;;) { 
....................         update_lcd (); 
0D50:  BRA    0BBE
....................         delay_ms (100); 
0D52:  MOVLW  64
0D54:  MOVWF  40
0D56:  CALL   0276
....................         c++; 
0D5A:  INCF   28,F
0D5C:  BTFSC  FD8.2
0D5E:  INCF   29,F
....................         if (!(c % 5)) 
0D60:  MOVFF  29,31
0D64:  MOVFF  28,30
0D68:  CLRF   33
0D6A:  MOVLW  05
0D6C:  MOVWF  32
0D6E:  CALL   04F4
0D72:  MOVF   00,W
0D74:  IORWF  03,W
0D76:  BNZ   0D8E
....................             set_pwm_duty (pwm_duty1+1, pwm_duty2+1); 
0D78:  MOVLW  01
0D7A:  ADDWF  1C,W
0D7C:  MOVWF  2A
0D7E:  MOVLW  01
0D80:  ADDWF  1D,W
0D82:  MOVWF  2B
0D84:  MOVFF  2A,2C
0D88:  MOVWF  2D
0D8A:  CALL   0536
....................     } 
0D8E:  BRA    0D50
.................... } 
....................  
....................  
.................... void update_lcd () 
.................... { 
0D90:  SLEEP 
....................     lcd_gotoxy (1, 1); 
*
0BBE:  MOVLW  01
0BC0:  MOVWF  41
0BC2:  MOVWF  42
0BC4:  RCALL  0438
....................     printf (lcd_putc, "C1=%d%%, C2=%d%%\n", pwm_duty1, pwm_duty2); 
0BC6:  MOVLW  43
0BC8:  MOVWF  3F
0BCA:  RCALL  0466
0BCC:  MOVLW  31
0BCE:  MOVWF  3F
0BD0:  RCALL  0466
0BD2:  MOVLW  3D
0BD4:  MOVWF  3F
0BD6:  RCALL  0466
0BD8:  MOVFF  1C,2A
0BDC:  MOVLW  1F
0BDE:  MOVWF  2B
0BE0:  RCALL  060E
0BE2:  MOVLW  25
0BE4:  MOVWF  3F
0BE6:  RCALL  0466
0BE8:  MOVLW  55
0BEA:  MOVWF  FF6
0BEC:  MOVLW  02
0BEE:  MOVWF  FF7
0BF0:  MOVLW  05
0BF2:  MOVWF  32
0BF4:  RCALL  06D6
0BF6:  MOVFF  1D,2A
0BFA:  MOVLW  1F
0BFC:  MOVWF  2B
0BFE:  RCALL  060E
0C00:  MOVLW  25
0C02:  MOVWF  3F
0C04:  RCALL  0466
0C06:  MOVLW  0A
0C08:  MOVWF  3F
0C0A:  RCALL  0466
....................     printf (lcd_putc, "C1=%.2fms, C2=%.2fms\n", (float)pwm_int1/100.0, (float)pwm_int2/100.0); 
0C0C:  MOVFF  1F,2F
0C10:  MOVFF  1E,2E
0C14:  RCALL  06F4
0C16:  MOVFF  00,2A
0C1A:  MOVFF  01,2B
0C1E:  MOVFF  02,2C
0C22:  MOVFF  03,2D
0C26:  MOVFF  03,35
0C2A:  MOVFF  02,34
0C2E:  MOVFF  01,33
0C32:  MOVFF  00,32
0C36:  CLRF   39
0C38:  CLRF   38
0C3A:  MOVLW  48
0C3C:  MOVWF  37
0C3E:  MOVLW  85
0C40:  MOVWF  36
0C42:  RCALL  072A
0C44:  MOVFF  00,2A
0C48:  MOVFF  01,2B
0C4C:  MOVFF  02,2C
0C50:  MOVFF  03,2D
0C54:  MOVFF  21,2F
0C58:  MOVFF  20,2E
0C5C:  RCALL  06F4
0C5E:  MOVFF  00,2E
0C62:  MOVFF  01,2F
0C66:  MOVFF  02,30
0C6A:  MOVFF  03,31
0C6E:  MOVFF  03,35
0C72:  MOVFF  02,34
0C76:  MOVFF  01,33
0C7A:  MOVFF  00,32
0C7E:  CLRF   39
0C80:  CLRF   38
0C82:  MOVLW  48
0C84:  MOVWF  37
0C86:  MOVLW  85
0C88:  MOVWF  36
0C8A:  RCALL  072A
0C8C:  MOVFF  00,2E
0C90:  MOVFF  01,2F
0C94:  MOVFF  02,30
0C98:  MOVFF  03,31
0C9C:  MOVLW  43
0C9E:  MOVWF  3F
0CA0:  CALL   0466
0CA4:  MOVLW  31
0CA6:  MOVWF  3F
0CA8:  CALL   0466
0CAC:  MOVLW  3D
0CAE:  MOVWF  3F
0CB0:  CALL   0466
0CB4:  MOVLW  89
0CB6:  MOVWF  FE9
0CB8:  MOVFF  2D,35
0CBC:  MOVFF  2C,34
0CC0:  MOVFF  2B,33
0CC4:  MOVFF  2A,32
0CC8:  MOVLW  02
0CCA:  MOVWF  36
0CCC:  RCALL  0A46
0CCE:  MOVLW  67
0CD0:  MOVWF  FF6
0CD2:  MOVLW  02
0CD4:  MOVWF  FF7
0CD6:  MOVLW  07
0CD8:  MOVWF  32
0CDA:  RCALL  06D6
0CDC:  MOVLW  89
0CDE:  MOVWF  FE9
0CE0:  MOVFF  31,35
0CE4:  MOVFF  30,34
0CE8:  MOVFF  2F,33
0CEC:  MOVFF  2E,32
0CF0:  MOVLW  02
0CF2:  MOVWF  36
0CF4:  RCALL  0A46
0CF6:  MOVLW  6D
0CF8:  MOVWF  3F
0CFA:  CALL   0466
0CFE:  MOVLW  73
0D00:  MOVWF  3F
0D02:  CALL   0466
0D06:  MOVLW  0A
0D08:  MOVWF  3F
0D0A:  CALL   0466
.................... //    printf (lcd_putc, "I1=%ld, I2=%ld\n", pwm_int1, pwm_int2); 
.................... } 
0D0E:  GOTO   0D52 (RETURN)
....................  
....................  
.................... void set_pwm_duty (int8 c1, int8 c2) 
.................... { 
....................     pwm_duty1 = c1; 
*
0536:  MOVFF  2C,1C
....................     pwm_duty2 = c2; 
053A:  MOVFF  2D,1D
....................     pwm_int1 = DUTY_TO_INT(c1); 
053E:  CLRF   03
0540:  MOVFF  2C,2E
0544:  MOVFF  03,2F
0548:  CLRF   19
054A:  BTFSC  FF2.7
054C:  BSF    19.7
054E:  BCF    FF2.7
0550:  MOVLW  01
0552:  MOVWF  4D
0554:  MOVLW  C2
0556:  MOVWF  4C
0558:  MOVFF  03,4F
055C:  MOVFF  2C,4E
0560:  RCALL  0100
0562:  BTFSC  19.7
0564:  BSF    FF2.7
0566:  MOVFF  02,2F
056A:  MOVFF  01,2E
056E:  MOVFF  02,31
0572:  MOVFF  01,30
0576:  CLRF   33
0578:  MOVLW  64
057A:  MOVWF  32
057C:  RCALL  04F4
057E:  MOVF   01,W
0580:  ADDLW  32
0582:  MOVWF  1E
0584:  MOVLW  00
0586:  ADDWFC 02,W
0588:  MOVWF  1F
....................     pwm_int2 = DUTY_TO_INT(c2); 
058A:  CLRF   03
058C:  MOVFF  2D,2E
0590:  MOVFF  03,2F
0594:  CLRF   19
0596:  BTFSC  FF2.7
0598:  BSF    19.7
059A:  BCF    FF2.7
059C:  MOVLW  01
059E:  MOVWF  4D
05A0:  MOVLW  C2
05A2:  MOVWF  4C
05A4:  MOVFF  03,4F
05A8:  MOVFF  2D,4E
05AC:  RCALL  0100
05AE:  BTFSC  19.7
05B0:  BSF    FF2.7
05B2:  MOVFF  02,2F
05B6:  MOVFF  01,2E
05BA:  MOVFF  02,31
05BE:  MOVFF  01,30
05C2:  CLRF   33
05C4:  MOVLW  64
05C6:  MOVWF  32
05C8:  RCALL  04F4
05CA:  MOVF   01,W
05CC:  ADDLW  32
05CE:  MOVWF  20
05D0:  MOVLW  00
05D2:  ADDWFC 02,W
05D4:  MOVWF  21
05D6:  CLRF   19
05D8:  BTFSC  FF2.7
05DA:  BSF    19.7
05DC:  BCF    FF2.7
....................     reset_pwm (); 
05DE:  RCALL  011E
05E0:  BTFSC  19.7
05E2:  BSF    FF2.7
.................... } 
05E4:  RETLW  00
....................  
....................  
....................  
.................... void reset_pwm () 
.................... { 
....................     output_high (CH1_PIN); 
*
011E:  BCF    F93.7
0120:  BSF    F8A.7
....................     output_high (CH2_PIN); 
0122:  BCF    F94.2
0124:  BSF    F8B.2
....................     pwm_duty1_cnt = INT_TO_COUNT (pwm_int1); 
0126:  MOVFF  1F,4D
012A:  MOVFF  1E,4C
012E:  CLRF   4F
0130:  MOVLW  0A
0132:  MOVWF  4E
0134:  RCALL  0100
0136:  RRCF   02,W
0138:  MOVWF  23
013A:  RRCF   01,W
013C:  MOVWF  22
013E:  RRCF   23,F
0140:  RRCF   22,F
0142:  RRCF   23,F
0144:  RRCF   22,F
0146:  RRCF   23,F
0148:  RRCF   22,F
014A:  RRCF   23,F
014C:  RRCF   22,F
014E:  RRCF   23,F
0150:  RRCF   22,F
0152:  MOVLW  03
0154:  ANDWF  23,F
....................     pwm_duty2_cnt = INT_TO_COUNT (pwm_int2); 
0156:  MOVFF  21,4D
015A:  MOVFF  20,4C
015E:  CLRF   4F
0160:  MOVLW  0A
0162:  MOVWF  4E
0164:  RCALL  0100
0166:  RRCF   02,W
0168:  MOVWF  25
016A:  RRCF   01,W
016C:  MOVWF  24
016E:  RRCF   25,F
0170:  RRCF   24,F
0172:  RRCF   25,F
0174:  RRCF   24,F
0176:  RRCF   25,F
0178:  RRCF   24,F
017A:  RRCF   25,F
017C:  RRCF   24,F
017E:  RRCF   25,F
0180:  RRCF   24,F
0182:  MOVLW  03
0184:  ANDWF  25,F
....................     pwm_total_cnt = INT_TO_COUNT (PWM_TOTAL_INT); 
0186:  MOVLW  01
0188:  MOVWF  27
018A:  MOVLW  86
018C:  MOVWF  26
.................... } 
018E:  RETLW  00

Configuration Fuses:
   Word  1: CE3A   PLL3 CPUDIV4 USBDIV HSPLL FCMEN IESO
   Word  2: 0E39   NOPUT NOBROWNOUT BORV20 VREGEN NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
